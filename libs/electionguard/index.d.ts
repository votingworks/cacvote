/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Manifest {
  electionScopeId: string
  specVersion: string
  type: ElectionType
  startDate: string
  endDate: string
  geopoliticalUnits: Array<GeopoliticalUnit>
  parties: Array<Party>
  candidates: Array<Candidate>
  contests: Array<Contest>
  ballotStyles: Array<BallotStyle>
  name: Array<string>
  contactInformation: ContactInformation
}
export const enum ElectionType {
  Primary = 0,
  General = 1
}
export interface GeopoliticalUnit {
  objectId: ObjectId
  name: string
  type: GeopoliticalUnitType
  contactInformation?: Array<ContactInformation>
}
export const enum GeopoliticalUnitType {
  District = 0
}
export interface Party {
  objectId: ObjectId
  name: string
  abbreviation: string
  color?: string
  logoUri?: string
}
export interface Candidate {
  objectId: ObjectId
  name: string
  partyId?: ObjectId
  imageUrl?: string
  isWriteIn: boolean
}
export interface Contest {
  objectId: ObjectId
  sequenceOrder: number
  electoralDistrictId: ObjectId
  voteVariation: VoteVariation
  numberElected: number
  votesAllowed: number
  name: string
  ballotSelections: Array<BallotSelection>
  ballotTitle?: string
  ballotSubtitle?: string
}
export interface BallotSelection {
  objectId: ObjectId
  sequenceOrder: number
  candidateId: ObjectId
}
export const enum VoteVariation {
  OneOfM = 0,
  NofM = 1
}
export interface BallotStyle {
  objectId: ObjectId
  geopoliticalUnitIds: Array<ObjectId>
  partyIds: Array<ObjectId>
  imageUri?: string
}
export interface ContactInformation {
  name: string
  addressLine: Array<string>
  email?: string
  phone?: string
}
/**
 * Convert a VX election to an EG manifest. The return value is the EG manifest
 * as a POJO.
 */
export function convertVxElectionToEgManifest(vxElection: import('@votingworks/types').Election): import('./types').Manifest
export interface ElectionConfig {
  publicMetadataBlob: Buffer
  privateMetadataBlob: Buffer
}
export function generateElectionConfig(classpath: string, egManifest: any): ElectionConfig
/**
 * Convert a VX CVR to an EG plaintext ballot. The `vx_election` argument
 * must be the election that corresponds to the `vx_cvr` argument. The
 * `eg_manifest` argument must be the manifest that corresponds to the
 * `vx_election` argument. The return value is the EG plaintext ballot as a
 * POJO.
 */
export function convertVxCvrToEgPlaintextBallot(vxElection: import('@votingworks/types').Election, egManifest: import('./types').Manifest, vxCvr: import('@votingworks/types').CVR.CVR): import('./types').PlaintextBallot
/**
 * Encrypt an EG plaintext ballot using the ElectionGuard Java implementation.
 * The `classpath` argument should be the path to the ElectionGuard Java JAR
 * file.  The `public_metadata_blob` argument should be the public metadata
 * blob from the `ElectionConfig` struct. The return value is the encrypted
 * ballot as a POJO.
 */
export function encryptEgPlaintextBallot(classpath: string, publicMetadataBlob: Uint8Array, egPlaintextBallot: import('./types').PlaintextBallot): import('./types').EncryptedBallot
